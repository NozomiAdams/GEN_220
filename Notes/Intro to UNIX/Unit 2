#Notes from Genetics 220 - Computational Analysis of High Throughput Biological Data
#Intro to Unix (II)
#All about files & executing applications

#Outline:
#1. Copy, rename files in UNIX
#2. Run programs & UNIX PATH
#3. Redirecting output, creating files
#4. Connecting programs with Pipes
#5. The power of the command line: Wildcards

cp - to make a copy of a file or directory
$#copy one file to another
$cp one.txt two.txt
cp: one.txt: No such file or directory
$touch one.txt
$ls
CA Lichens	LaKretz17.ova	Papers		UCLA
GEN220		Lichen		Programming	one.txt
$touch two.txt
$ls
CA Lichens	Lichen		UCLA
GEN220		Papers		one.txt
LaKretz17.ova	Programming	two.txt
$cp one.txt two.txt
$ls
CA Lichens	Lichen		UCLA
GEN220		Papers		one.txt
LaKretz17.ova	Programming	two.txt
$#make a directory
$mkdir books
$cp one.txt books
$ls books
one.txt
$#copied one.txt into a directory named books, then listed contents
$one.txt
-bash: one.txt: command not found
$#copy the folder, will fail
$cp books more_books
cp: books is a directory (not copied).
$cp -r books more_books
$#recursive copy succeeds
$cp one.txt two.txt books
$#can copy more than one at a time and will overwrite the previous one.txt that was in the folder
$ls books
one.txt	two.txt
$ls more_books
one.txt

#Move Files
mv - to move a file
#This is essentially the same thing as renaming. The absolute path that designates a file is
simply being changed when something is moved

$mv one.txt three.txt
$#rename one.txt to three.txt
$mv three.txt books
$#relocate three.txt to books folder
$pwd
/Users/juliaadams/Desktop
$cd books
$pwd
/Users/juliaadams/Desktop/books
$mv one.txt two.txt three.txt .. 
$#move these files back up one
$ls
$#now thing is in the 'books' directory
$cd ..
$#go back
$ls
CA Lichens	Lichen		UCLA		one.txt
GEN220		Papers		books		three.txt
LaKretz17.ova	Programming	more_books	two.txt
$#these files are in the current folder
$one.txt two.txt three.txt books more_books
-bash: one.txt: command not found
$ls books
$#it is empty b/c we move everything out 

#The path variable 
#how does UNIX determine what program to run?
#Try echo $PATH to see your search directory
#Also do env to see all environment variables
#Open a terminal window; type

echo $PATH
/Users/juliaadams/miniconda3/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
$ENV
TERM_PROGRAM=Apple_Terminal
SHELL=/bin/bash
TERM=xterm-256color
TMPDIR=/var/folders/dd/mm6xcnzn3bzddsdvlf7s3mm40000gn/T/
Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.y9MByrORv5/Render
TERM_PROGRAM_VERSION=343
TERM_SESSION_ID=9CAE45E3-FEB9-4668-BC59-4F9572288420
USER=juliaadams
SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.uuhMYDRbAm/Listeners
__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0
PATH=/Users/juliaadams/miniconda3/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
PWD=/Users/juliaadams/Desktop
LANG=en_US.UTF-8
XPC_FLAGS=0x0
XPC_SERVICE_NAME=0
SHLVL=1
HOME=/Users/juliaadams
LOGNAME=juliaadams
DISPLAY=/private/tmp/com.apple.launchd.E0cQenaWSa/org.macosforge.xquartz:0
_=/usr/bin/ENV
OLDPWD=/Users/juliaadams/Desktop/books
$export PATH=""
$#try running any program, eg ls or hostname, etc and will fail because path is now empty
$ls
-bash: ls: No such file or directory
$hostname
-bash: hostname: No such file or directory
$which nano
-bash: which: No such file or directory
$export PATH="/Users/juliaadams/miniconda3/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
> PWD=/Users/juliaadams/Desktop"
$hostname
Julias-MacBook.att.net
$ls
CA Lichens	Lichen		UCLA		one.txt
GEN220		Papers		books		three.txt
LaKretz17.ova	Programming	more_books	two.txt
$which nano
/usr/bin/nano
$pwd
/Users/juliaadams/Desktop
$rm one.txt
$pwd
/Users/juliaadams/Desktop
$ls
CA Lichens	Lichen		UCLA		three.txt
GEN220		Papers		books		two.txt
LaKretz17.ova	Programming	more_books
$rm two.txt
$rm three.txt
$rm books
rm: books: is a directory
$ls
CA Lichens	Lichen		UCLA
GEN220		Papers		books
LaKretz17.ova	Programming	more_books
$cd books
$ls
$cd ..
$cd more_books
$ls
one.txt
$rm one.txt
$ls
$which nano
/usr/bin/nano
$#this tells you where the nano program is located

#SOME USEFUL COMMANDS
wc - count the number of lines, words, characters
tail - see the last N lines of a file
head - see the first N lines of a file
cat - print out entire file to screen
sed - 'stream editor' - edit data stream on the fly
curl - dowloading tool for web/ftp data streams
which - list path to a program based on the $PATH
pwd - print the current working directory
ps - processes the running on the system
man - view manual pages about a command or program
date - date and time
time - prefix a command/program, report how long it took to run
find - find files/folders by name or other property
du - reports disk usage (e.g., how big a file or folder is)
awk - a simple language for processing files/great for column delimited data

#COUNTING LINES WITH wc

$echo "hello world" | wc
       1       2      12
$#processes a file
$wc -l data/Nc20H.expr.tab 9734 Nc20H.tab
wc: data/Nc20H.expr.tab: open: No such file or directory
wc: 9734: open: No such file or directory
wc: Nc20H.tab: open: No such file or directory
       0 total
$wc -l data/Nc20H.expr.tab
wc: data/Nc20H.expr.tab: open: No such file or directory

#NETWORK ACCESS
#UNIX gives you access to many utilities to talk to the network
$hostname
Julias-MacBook.att.net
$ping -c 3 www.ucr.edu
PING www.ucr.edu (138.23.226.208): 56 data bytes
64 bytes from 138.23.226.208: icmp_seq=0 ttl=240 time=29.195 ms
64 bytes from 138.23.226.208: icmp_seq=1 ttl=240 time=31.122 ms
64 bytes from 138.23.226.208: icmp_seq=2 ttl=240 time=32.171 ms

--- www.ucr.edu ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 29.195/30.829/32.171/1.232 ms
$#send 3 packets of into to the host, count how long it takes to get back
$ping -c 3 www.bbc.co.uk
PING www.bbc.net.uk (212.58.244.69): 56 data bytes
64 bytes from 212.58.244.69: icmp_seq=0 ttl=46 time=168.657 ms
64 bytes from 212.58.244.69: icmp_seq=1 ttl=46 time=211.438 ms
64 bytes from 212.58.244.69: icmp_seq=2 ttl=46 time=169.862 ms

--- www.bbc.net.uk ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 168.657/183.319/211.438/19.889 ms

#OTHER IMPORTANT COMMANDS WHEN RUNNING PROGRAMS
#Somtimes something will go wrong and something will go wrote and need to kill'quit
program or need to suspend the program and come back to it

cat #whatever you type will be re-echoed
#To exit type Control-C
$cat
^C
$#whatever you type will be re-echoed
$cat
^C
$#to exit you can also type control-D, this also tells cat the "file" is over
$cat
$D

#PROCESS CONTROL
Control-Z sends a suspended message to a program that is running. To bring it to
$ping www.ucr.edu
PING www.ucr.edu (138.23.226.208): 56 data bytes
64 bytes from 138.23.226.208: icmp_seq=0 ttl=240 time=29.440 ms
64 bytes from 138.23.226.208: icmp_seq=1 ttl=240 time=31.967 ms
64 bytes from 138.23.226.208: icmp_seq=2 ttl=240 time=30.270 ms
64 bytes from 138.23.226.208: icmp_seq=3 ttl=240 time=31.422 ms
64 bytes from 138.23.226.208: icmp_seq=4 ttl=240 time=33.643 ms
64 bytes from 138.23.226.208: icmp_seq=5 ttl=240 time=31.225 ms
64 bytes from 138.23.226.208: icmp_seq=6 ttl=240 time=32.350 ms
64 bytes from 138.23.226.208: icmp_seq=7 ttl=240 time=31.501 ms
64 bytes from 138.23.226.208: icmp_seq=8 ttl=240 time=31.652 ms
64 bytes from 138.23.226.208: icmp_seq=9 ttl=240 time=30.946 ms
64 bytes from 138.23.226.208: icmp_seq=10 ttl=240 time=31.401 ms
64 bytes from 138.23.226.208: icmp_seq=11 ttl=240 time=35.881 ms
64 bytes from 138.23.226.208: icmp_seq=12 ttl=240 time=30.684 ms
^Z
[1]+  Stopped                 ping www.ucr.edu
$bg
[1]+ ping www.ucr.edu &
$64 bytes from 138.23.226.208: icmp_seq=13 ttl=240 time=32.580 ms
64 bytes from 138.23.226.208: icmp_seq=14 ttl=240 time=37.277 ms
64 bytes from 138.23.226.208: icmp_seq=15 ttl=240 time=30.740 ms
64 bytes from 138.23.226.208: icmp_seq=16 ttl=240 time=30.956 ms
64 bytes from 138.23.226.208: icmp_seq=17 ttl=240 time=31.484 ms
64 bytes from 138.23.226.208: icmp_seq=18 ttl=240 time=30.735 ms
64 bytes from 138.23.226.208: icmp_seq=19 ttl=240 time=31.538 ms
64 bytes from 138.23.226.208: icmp_seq=20 ttl=240 time=30.741 ms
64 bytes from 138.23.226.208: icmp_seq=21 ttl=240 time=31.894 ms
64 bytes from 138.23.226.208: icmp_seq=22 ttl=240 time=30.755 ms
64 bytes from 138.23.226.208: icmp_seq=23 ttl=240 time=30.832 ms
64 bytes from 138.23.226.208: icmp_seq=24 ttl=240 time=31.743 ms
64 bytes from 138.23.226.208: icmp_seq=25 ttl=240 time=32.413 ms
64 bytes from 138.23.226.208: icmp_seq=26 ttl=240 time=30.985 ms
64 bytes from 138.23.226.208: icmp_seq=27 ttl=240 time=30.658 ms
64 bytes from 138.23.226.208: icmp_seq=28 ttl=240 time=32.065 ms
64 bytes from 138.23.226.208: icmp_seq=29 ttl=240 time=31.879 ms
64 bytes from 138.23.226.208: icmp_seq=30 ttl=240 time=40.558 ms
64 bytes from 138.23.226.208: icmp_seq=31 ttl=240 time=31.781 ms
64 bytes from 138.23.226.208: icmp_seq=32 ttl=240 time=31.395 ms
64 bytes from 138.23.226.208: icmp_seq=33 ttl=240 time=32.643 ms
64 bytes from 138.23.226.208: icmp_seq=34 ttl=240 time=33.945 ms
64 bytes from 138.23.226.208: icmp_seq=35 ttl=240 time=31.453 ms
fg
ping www.ucr.edu
64 bytes from 138.23.226.208: icmp_seq=36 ttl=240 time=30.987 ms
64 bytes from 138.23.226.208: icmp_seq=37 ttl=240 time=32.039 ms
64 bytes from 138.23.226.208: icmp_seq=38 ttl=240 time=31.613 ms
64 bytes from 138.23.226.208: icmp_seq=39 ttl=240 time=31.193 ms
64 bytes from 138.23.226.208: icmp_seq=40 ttl=240 time=30.851 ms
64 bytes from 138.23.226.208: icmp_seq=41 ttl=240 time=39.567 ms
64 bytes from 138.23.226.208: icmp_seq=42 ttl=240 time=34.689 ms
64 bytes from 138.23.226.208: icmp_seq=43 ttl=240 time=31.479 ms
64 bytes from 138.23.226.208: icmp_seq=44 ttl=240 time=34.002 ms
64 bytes from 138.23.226.208: icmp_seq=45 ttl=240 time=31.770 ms
^C
--- www.ucr.edu ping statistics ---
46 packets transmitted, 46 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 29.440/32.209/40.558/2.190 ms

#control - z put it in the background, bg - will continue to run in the background
#bring it back to the foreground with 'fg'
#cancel it with Control-C

#If you have more than one process in the background, fg will bring up the most recent one
# You can switch to a particular one using the name
fg ping
#or use the job number
fg 2 
#since it said [2]+ Stopped...
#can report the current background jobs with

#ps FOR PROCESS INFORMATION
#you can see all the processes you are running with ps
$ps
  PID TTY           TIME CMD
 1559 ttys000    0:00.73 -bash
 
 #KILLING JOBS
if you have a runaway process you need to stop you can also use the kill command
$kill 1559
$ps
  PID TTY           TIME CMD
 1559 ttys000    0:00.74 -bash
 
#Sometimes jobs are hard to kill - suspended or locked up use special option -9
which sends a "Hard Quit" to the program
$kill -9 1559

[Process completed]

Last login: Mon Jun 19 15:38:28 on ttys000
Julias-MacBook:~ juliaadams$ ps
  PID TTY           TIME CMD
 6576 ttys000    0:00.01 -bash
Julias-MacBook:~ juliaadams$ #finished up with killing previous job and now have new job
#Data download with curl
#curl to download data from any URL (http://, ftp://)
Julias-MacBook:~ juliaadams$ curl http://www.uniprot.org/uniprot/E3Q6S8.fasta
>tr|E3Q6S8|E3Q6S8_COLGM RNAse P Rpr2/Rpp21/SNM1 subunit domain-containing protein OS=Colletotrichum graminicola (strain M1.001 / M2 / FGSC 10212) GN=GLRG_02386 PE=4 SV=1
MAKPKSESLPNRHAYTRVSYLHQAAAYLATVQSPTSDSTTNSSQPGHAPHAVDHERCLET
NETVARRFVSDIRAVSLKAQIRPSPSLKQMMCKYCDSLLVEGKTCSTTVENASKGGKKPW
ADVMVTKCKTCGNVKRFPVSAPRQKRRPFREQKAVEGQDTTPAVSEMSTGAD
Julias-MacBook:~ juliaadams$ curl -0 http://www.uniprot.org/uniprot/E3Q6S8.fasta
>tr|E3Q6S8|E3Q6S8_COLGM RNAse P Rpr2/Rpp21/SNM1 subunit domain-containing protein OS=Colletotrichum graminicola (strain M1.001 / M2 / FGSC 10212) GN=GLRG_02386 PE=4 SV=1
MAKPKSESLPNRHAYTRVSYLHQAAAYLATVQSPTSDSTTNSSQPGHAPHAVDHERCLET
NETVARRFVSDIRAVSLKAQIRPSPSLKQMMCKYCDSLLVEGKTCSTTVENASKGGKKPW
ADVMVTKCKTCGNVKRFPVSAPRQKRRPFREQKAVEGQDTTPAVSEMSTGAD
Julias-MacBook:~ juliaadams$ curl -o myseqfile.fa http://www.uniprot.org/uniprot/E3Q6S8.fasta
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   345  100   345    0     0   1418      0 --:--:-- --:--:-- --:--:--  1413

#There are other similar commands that may be installed on other systems
wget - also gets web/FTP on commandline
ncftpget - for ftp
lftp - a command line FTP client - also works for http/web

#REDIRECT OUTPUT
#write out the output to file (create it if empty, and overwrite if exists)
Julias-MacBook:~ juliaadams$ #write out output to a file (create it if empty), but append to the end of the file
Julias-MacBook:~ juliaadams$ echo "my name is" >>
-bash: syntax error near unexpected token `newline'
Julias-MacBook:~ juliaadams$ echo "my name is " >> what_is_my name
Julias-MacBook:~ juliaadams$ echo "Joe" >> what_is_my_name
Julias-MacBook:~ juliaadams$ cat what_is_my_name
Joe
Julias-MacBook:~ juliaadams$ #my name is Joe

#COMPRESSION
#File compression is important for saving space on disks. Also for transferring
data between hosts, compressed files will take less time to transfer
1. gzip for GNUzip compression. Single file at a time. (biocluster) pigz is parallelized
and can use multiple processors
$ du -h data/Nc20H.expr.tab        # report how big the file is
656K    data/Nc20H.expr.tab
$ gzip data/Nc20H.expr.tab         # to compress
$ du -h data/Nc20H.expr.tab.gz     # report size of compressed file 
236K    data/Nc20H.expr.tab.gz
$ gunzip data/Nc20H.expr.tab.gz    # to uncompress

2. bizip2 for Bzip compression. Better compression than gzip, but slower (biocluster) pbzip2
is parallelized and can use multiple processors
$ bzip2 data/Nc20H.expr.tab        # compress with bzip2
$ du -h data/Nc20H.expr.tab.bz2    # report size of bzipped file
204K    data/Nc20H.expr.tab.bz2
$ bunzip2 data/Nc20H.expr.tab.bz2
3. zcat, zmore, and bzcat, bzmore to read files on the fly (without uncompressing entire file at once)

#File/disk usage with du
-h -- human readable (eg bytes, K, G, and T)
$ du -h data/Nc20H.expr.tab        # report how big the file is

#MANUAL PAGES WITH man
man ls
[1]+  Stopped                 man ls

#SETTING ON THE SYSTEM PREFERENCES WITH .bashrc, .bash_profile, .profile
#How the shell determines what variables to set and load is based on a series of system & local 
#confirguration files. These are the initialization options that are setup every time a shell is run 
- when you login or if you type bash you start a new shell session.
PATH and all other variables set in these files. They can be dependencies on other files, 
so multiple places can be sourced for these parameters. 
Other environmental variables are important when we start to install Python (PYTHONPATH) or 
Perl (PERL5LIB) or other libraries.
If you make changes and want to immediately see the difference without logging out/logging back in 
Use. $source ~/.bash)profile

#CONNECTING PROGRAMS WITH PIPES
#There are 3 types of data streams in UNIX
SDOUT - standard output stream (stream 1)
STDERR - standard error stream (stream 2)
STDIN - standard input stream (stream 0)
#When running a program, it prints to a screen that is usually STDOUT. This can be 
captured with > to redirect to a file 
$ ls > listing.txt
listing.txt
one.txt

#SDERR error message capture 



