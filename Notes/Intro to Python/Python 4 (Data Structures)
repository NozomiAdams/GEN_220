DATA STRUCTURES IN PYTHON

WALKING THROUGH ARRAYS
>>> l = ['a','b','c']
>>> print(l)
['a', 'b', 'c']
>>> print(",".join(l))
a,b,c
>>> l.append(100)
>>> print(l)
['a', 'b', 'c', 100]
>>> print(",".join(l))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sequence item 3: expected str instance, int found
>>> print(",".join(l))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sequence item 3: expected str instance, int found
>>> print(";".join(str(x)for x in l))
a;b;c;100

SOME BUILT-IN FUNCTIONS
range()-range(start,stop[step])
range(5,10,1)
range(5, 10)
>>> range(5,-1,-1)
range(5, -1, -1)

sorted() - Return a new sorted list from the items in iterable
l = ['aaa','bat','zoo','hog']
>>> sorted(l)
['aaa', 'bat', 'hog', 'zoo']
>>> sorted(l,cmp= lambda x,y: cmp(x.lower(), y.lower()))
['aaa','Bat', 'hog', 'zoo']
# can use reverse option to flip order
>>> sorted(l,cmp= lambda x,y: cmp(x.lower(), y.lower()),reverse=True)
['zoo', 'hog', 'Bat', 'aaa']

MORE BUILT IN FUNCTIONS
map() - lets you update a list with a function
l = ['a',100,12/3.3]
>>> print(l)
['a', 100, 3.6363636363636367]
>>> print(";".join(map(str,l)))
a;100;3.6363636363636367
>>> l = ['A','Bear','AAAGGH']
>>> lens = map(len,l)
>>> print(l)
['A', 'Bear', 'AAAGGH']

reversed() - iterate in reverse order of an array/string
l = ['zzz','yyy']
>>> for n in reversed(l):
...     print(n)
... 
yyy
zzz

REMOVE AN ITEM FROM LIST
del() - remove an item from a list
l = ['a','b','c','d']
>>> del l[2]
>>> print(l)
['a', 'b', 'd']
>>> del l[1:3]
>>> print(l)
['a']

MORE ARRAY FUNCTIONS
See more details here https://docs.python.org/2/tutorial/datastructures.html

list.append(x) - Add an item to the end of the list;
list.extend(L) - Extend the list by appending all the items in the given list;
list.insert(i, x) - Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).
list.remove(x) - Remove the first item from the list whose value is x. It is an error if there is no such item.
list.pop([i]) - Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list.
list.index(x) - Return the index in the list of the first item whose value is x. It is an error if there is no such item.
list.count(x) - Return the number of times x appears in the list.
list.sort(cmp=None, key=None, reverse=False) - Sort the items of the list in place
list.reverse() - Reverse the order of the items in the list

ITERATE ON STRINGS/ARRAYS IN THE SAME WAY 

lst = ['BRCA1','SOD1','PTEN']
>>> for gene in sorted(lst):
...     print("gene is", gene)
... 
gene is BRCA1
gene is PTEN
gene is SOD1

or let in DNA:
...     print(let)
... 
A
A
A
A
C
C
G
T
A
G

DICTIONARIES
#dictionaries are indexed by keys, which can be any immutable type; strings, and numbers
can always be keys

Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple
contains any mutable object either directly or indirectly, it cannot be used as a key
You can't use lists as keys, since lists can be modified in place using index assignments
slice assignments, or methods like append() and extend()

#Initialize a dictionary, dictionaries are key and value pairs
things = {} #an empty directory
>>> listofstuff = [] #an empty array
>>> print(things)
{}
>>> print(stuff)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'stuff' is not defined
>>> print(listofstuff)
[]
>>> things = {'diane':10,'jack':13}
>>> things
{'diane': 10, 'jack': 13}
>>> things['diane']
10
>>> things['billy']=15
>>> morethings = dict([('sape',4139),('guido
  File "<stdin>", line 1
    morethings = dict([('sape',4139),('guido
                                           ^
SyntaxError: EOL while scanning string literal
>>> morethings = dict([('sape',4139),('guido',4127),('jack',4098)])
>>> morethings['guido']
4127

ITERATE THROUGH A DICTIONARY
#using the for loop and the items() function
for key,value in morethings.items():
...     print("key is",key,"value is",value)
... 
key is sape value is 4139
key is guido value is 4127
key is jack value is 4098

READ FASTA CODE PART 1
import itertools
import gzip
import sys
import re
# based on post here
# https://drj11.wordpress.com/2010/02/22/python-getting-fasta-with-itertools-groupby/
# define what a header looks like in FASTA format
def isheader(line):
    return line[0] == '>'
# this function reads in fasta file and returns pairs of data
# where the first item is the ID and the second is the sequence
# it isn't that efficient as it reads it all into memory
# but this is good enough for our project
def aspairs(f):
seq_id = ''
sequence = ''
for header,group in itertools.groupby(f, isheader):
  if header:
      line = group.next()
      seq_id = line[1:].split()[0]
  else:
      sequence = ''.join(line.strip() for line in group)
      yield seq_id, sequence
     
 here is my program
# get the filename from the cmdline      
filename = sys.argv[1]
# open files if compressed with gzip
if re.match('(\S+)\.gz$',filename):
   with gzip.open(filename,"rb") as f:
     seqs = dict(aspairs(f))
else:
   print "filename ",filename,"doesn't match .gz"
   with open(filename,"r") as f:
      seqs = dict(aspairs(f))
# iterate through the sequences
n=0
for k,v in seqs.iteritems():
    print "id is ",k,"seq is",v
     n += 1
print n,"sequences"

Notes for 10/25/2017
Python 4 - Dictionaries, Functions
Lists and Array Reminders
To create a list of items, use the [ ]
genes = ['SOD1','CDC11','YFG1']
print(genes)
print(genes[1])
print(genes[1:]) #everything after slot 1
print(genes[:1])
print(len(genes))

range() gives you back a list of numbers based on some function
map() allows you transform data from one form to another 

Sorting lists
genes sorted by names

Dates and times:
datetime import datetime

Dictionaries
There are a set of pairs of things: always a key and a value
diane: 10 
key is unique index into a dictionary
keys are unique

Functions: 
blocks of code that we can call again and again

Regular Expressions: Pattern Matching 10.27.17
Pattern matching: sometime we want to match not a single equality but a pattern. Mostly this is used for text processing
import re to use regular expressions
all things start with re in code for regular expressions
re.search(PATTERN,QUERYSTRING)
if RESULT:  
  #WE HAD A MATCH
else
  #WE DID NOT HAVE A MATCH
 use search pattern we are looking for a substring
 + is 1 or more times
 * is 0 or more times
 question mark is 0 or 1 instances come before the text
 

Regular Expressions: Pattern matching on 11.1.17
du -h is disc usage and human readable
homework 2: if num % 3 == 0:
problem #3 
process each line in a file an remove the trailing new line
get the three columns that 
split by tab
codons = cols[0]
string and split it on a comma
add to it every time you see an amino acid
keep track of how many unique amino acids you saw
aa_fourfold += 1
hw #3 use dictionaries to keep track of things
use dictionaries and ability to ask for more than one thing from a string
if he gives us a string with DNA and asked us to find all of the dinucleotides and adjacent sequences 
walk through a sring and find the pairs 
for loop (for character in string:
  looks at every nucleotide in sequences 
  #need 2 characters at a time; iterate through a base use the string option and get one base at a time
  str[0] gives us back A 
  str[0:2] gives us back AA going up to but not including position 2
  for loop has to update the start and the stop and need a for loop for doing that
  need an iterate that generates numbers from 0 to this 
  #need to use range
  m = str[0:2]
  1. iterator walks through all the things in the sequence and it goes up by 1 
  use len function to tcall len(str)
  pass in two files and make 2 dictionaries and each dictionary you keep track of AA for seq file 1 and seq file 2
  do a look up for AA in the dictionary for file 1 and file 2 (freq or percentage is ok)
  
  look at columns ability to use pattern searches
  the number you are looking for are between these two numbers 
  if number is greater than equal to this or less than equal to that 
  use regular expressioni. turn into a number that you can do a computation on 
  YP_008253351-YP_008253423
  
  Vince Buffalo's book has a section on git
  Git tutorial can do an upload of the solution
  running code on the cluster eventually
  make a repostitory git init #first time to start something new
  git add to add files you want to track 
  done do a git commit " " describe what a check in was difference between 
  keeps track on a version in your computer 
  if you want to know what is different, then you can type git diff shows a difference file where lines and changes have been made
  git push copies it up to the cloud 
  git clone to check out the homework 
  if you have it already checked out do a git pull
  git add tells git to track that file
  commit check in any file that has changed that you told it to track
  git rm (to remove) removes it from being tracked 
  make a repository so you have a version of what is running and add them to the repository
  set up github repository and read me or text file with a project description
  collaboratively writing a text file
  
  Python libraries: 
  gzip, or bzip are tools for compressing data files
  the amount of disc space for cheap 
  wb data that is sending is binary and uses all the possible characters and bytes
  import csv and tell the delimiter that its a tab and not a comma
  other parsers deal with tab delimited data
  data with bed format with bedtools that allow you to interact with the data
  pybedtools: bed format is simple compact format
  vince buffalo's book describes range queries 
  where are indels across the genome and does the indel pattern if you are near a gene for not
  what are the other features that are within 5 kb of this thing
  with a range what are all the things that overlap in this range
  
  Biopython - set of examples in bioinformatics 
  sequences are one of the main things we deal with 
  import bio
  how to write a fasta sequence parser 
  fasta sequence file 
  import SeqIO
  how to get fasta file out effeciently to build a dictionary and print it out 
  
